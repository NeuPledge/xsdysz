<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iocoder.yudao.module.debrief.dal.mysql.evaluateresult.EvaluateResultMapper">

    <!--
        一般情况下，尽可能使用 Mapper 进行 CRUD 增删改查即可。
        无法满足的场景，例如说多表关联查询，才使用 XML 编写 SQL。
        代码生成器暂时只生成 Mapper XML 文件本身，更多推荐 MybatisX 快速开发插件来生成查询。
        文档可见：https://www.iocoder.cn/MyBatis/x-plugins/
     -->

    <select id="groupByCount" resultType="java.util.Map">
        select party_member_id, count(comment) as comment
        from debrief_evaluate_result
        where `comment` = #{comment}
          and `college_id` = #{collegeId,jdbcType=BIGINT}
        group by party_member_id, comment;
    </select>

    <!--  近30日测评完成党员进度趋势  -->
    <select id="finishProgressTrend" resultType="cn.iocoder.yudao.module.debrief.controller.admin.evaluateresult.dto.ProgressTrendDto">
        select
            date(create_time) as `day`, count(distinct party_member_id) as `dayCount`, SUM(COUNT(DISTINCT party_member_id)) OVER (ORDER BY DATE(create_time)) AS `totalCount`
        from
            debrief_evaluate_result
        where create_time >= #{startDate} and create_time &lt;= CURDATE() + INTERVAL 1 day
        group by date(create_time)
        order by `day` asc
    </select>
    <!--  近30日每日测评票数  -->
    <select id="commentTrend" resultType="cn.iocoder.yudao.module.debrief.controller.admin.evaluateresult.dto.CommentTrendDto">
        select
            date(create_time) as `day`, comment, count(1) as `num`
        from
            debrief_evaluate_result
        where create_time >= #{startDate} and create_time &lt;= CURDATE() + INTERVAL 1 day
        group by date(create_time), comment
        order by `day` asc
    </select>

    <select id="unCommentStudent" resultType="cn.iocoder.yudao.module.debrief.controller.admin.evaluateresult.dto.UnCommentStudent">
        select t1.id,t1.name,t1.student_number,t1.grade_name,c.college_name
        from (
                 (SELECT * from debrief_student where id in (select distinct * from
                     (select distinct id from debrief_student where id not in
                                                                    (select distinct commenter_id from debrief_evaluate_result)
                     ) b) order by college_id asc) t1 left join debrief_dic_college c on t1.college_id = c.id)
        where t1.college_id = #{collegeId}
    </select>

    <!--  学院测评进度  -->
    <select id="collegeProgress" resultType="cn.iocoder.yudao.module.debrief.controller.admin.evaluateresult.dto.CollegeProgressDto">
        select
            `all`.college_id,
            ddc.college_name,
            ifnull(num,0) as num,
            ifnull(total,0) as total ,
            ifnull(round(100 * num / total, 1),0)  as ratio
        from
            (
            select
            college_id,
            count(1) as `total`
            from
            debrief_party_member
            group by
            college_id) `all`
            left join
            (
            select
            college_id,
            count(distinct party_member_id) as `num`
            from
            debrief_evaluate_result
            group by
            college_id ) result
        on
            `all`.college_id = result.college_id
            left join debrief_dic_college ddc on
            ddc.id = `all`.college_id
        order by
            ratio asc
    </select>

    <!--  支部测评进度  -->
    <select id="branchProgress" resultType="cn.iocoder.yudao.module.debrief.controller.admin.evaluateresult.dto.BranchProgressDto">
        select
            `all`.branch_id,
            ddc.branch_name,
            ifnull(num,0) as num,
            ifnull(total,0) as total ,
            ifnull(round(100 * num / total, 1),0)  as ratio
        from
            (
                select
                    branch_id,
                    count(1) as `total`
                from
                    debrief_party_member
                group by
                    branch_id) `all`
                left join
            (
                select
                    branch_id,
                    count(distinct party_member_id) as `num`
                from
                    debrief_evaluate_result
                group by
                    branch_id ) result
            on
                `all`.branch_id = result.branch_id
                left join debrief_dic_branch ddc on
                ddc.id = `all`.branch_id
        order by
            ratio asc
    </select>

    <!--  班级测评进度  -->
    <select id="gradeProgress" resultType="cn.iocoder.yudao.module.debrief.controller.admin.evaluateresult.dto.GradeProgressDto">

        select
            `all`.grade_id,
            ddc.grade_name,
            ifnull(num,0) as num,
            ifnull(total,0) as total ,
            ifnull(round(100 * num / total, 1),0)  as ratio
        from
            (
                select
                    grade_id,
                    count(1) as `total`
                from
                    debrief_party_member
                group by
                    grade_id) `all`
                left join
            (
                select
                    grade_id,
                    count(distinct party_member_id) as `num`
                from
                    debrief_evaluate_result
                group by
                    grade_id ) result
            on
                `all`.grade_id = result.grade_id
                left join debrief_dic_grade ddc on
                ddc.id = `all`.grade_id
        order by
            ratio asc
    </select>

    <select id="c1Result" resultType="cn.iocoder.yudao.module.debrief.controller.admin.evaluateresult.dto.CtypeResult">
        select a.${ctype} as ctype,a.stype,a.num,ifnull(round(a.num/b.partymembercount,4),0) rate from (
        select ${ctype},stype,count(1) as num
        from (
        select
        party_member_id,student_number,stype,total_num,
        c1_num,c1_rate, case when c1_rate = 100 then 'c1_100' when c1_rate >= 90 and c1_rate >= 99 then 'c1_90' when c1_rate >= 80 and c1_rate >= 89 then 'c1_80' when c1_rate >= 70 and c1_rate >= 79 then 'c1_70' when c1_rate >= 60 and c1_rate >= 69 then 'c1_60' when c1_rate >= 50 and c1_rate >= 59 then 'c1_50' else 'c1_less_50' end c1_type,
        c12_num,c12_rate,case when c12_rate = 100 then 'c12_100' when c12_rate >= 90 and c12_rate >= 99 then 'c12_90' when c12_rate >= 80 and c12_rate >= 89 then 'c12_80' when c12_rate >= 70 and c12_rate >= 79 then 'c12_70' when c12_rate >= 60 and c12_rate >= 69 then 'c12_60' when c12_rate >= 50 and c12_rate >= 59 then 'c12_50' else 'c12_less_50' end c12_type,
        c3_num,c3_rate,case when c3_rate &lt; 10 then 'c3_less_10' when c3_rate >= 10 and c3_rate >= 19 then 'c3_10' when c3_rate >= 20 and c3_rate >= 29 then 'c3_20' when c3_rate >= 30 and c3_rate >= 39 then 'c3_30' when c3_rate >= 40 and c3_rate >= 49 then 'c3_40' when c3_rate &lt; 50 then 'c3_less_50' when c3_rate >= 50 then 'c3_more_50' end c3_type
        from (
        select party_member_id,
        dpm.student_number,
        case length(dpm.student_number) when 8 then 'benke' else 'yanjiusheng' end as stype,
        sum(num) total_num,
        sum(num * c1) c1_num,
        round(100*sum(num * c1)/sum(num),2) c1_rate,
        sum(num * c12) c12_num,
        round(100*sum(num * c12)/sum(num),2) c12_rate,
        sum(num * c3) c3_num,
        round(100*sum(num * c3)/sum(num),2) c3_rate
        from (
        select
        party_member_id, comment, count(1) as num,
        case when comment=1 then 1 else 0 end as c1,
        case when comment=1 or comment=2 then 1 else 0 end as c12,
        case when comment=3 then 1 else 0 end as c3
        from debrief_evaluate_result
        where `college_id` = #{collegeId}
        group by party_member_id, comment order by party_member_id asc) subq
        left join debrief_party_member dpm on dpm.id = subq.party_member_id
        group by party_member_id
        ) subq
        ) subq
        group by ${ctype},stype
        ) a
        left join
        (	select stype,count(1) partymembercount from
        (
        select
        case length(student_number) when 8 then 'benke' else 'yanjiusheng' end as stype
        from (select distinct party_member_id,dpm.student_number  from debrief_evaluate_result der left join  debrief_party_member dpm on dpm.id = der.party_member_id
        where der.`college_id` = #{collegeId}) subq
        ) subq
        group by stype
        ) b
        on a.stype = b.stype
    </select>

</mapper>